input UserInput {
    site: String
    compCd: String
    userName: String
    userId: String
    userPwd: String
    imagePath: String
    roleId: String
    userEmail: String
    phoneNum: String
    departmentId: String
}

input ExistLoginRequest {
    loginId: String!
}

type UserOutput {
    userId: String
    userNm: String
    email: String
    roleId: String
    status: String!
    message: String!
}

type UserResponse {
    id: Int!
    loginId: String!
    userName: String!
    departmentName: String
    position: String
    authorityName: String
    flagActive: String
}

type UserDetail {
    id: Int!
    loginId: String!
    userName: String!
    departmentName: String
    position: String
    authorityName: String!
    email: String
    phoneNumber: String
    flagActive: String
}

type RoleResponseForSelect {
    roleId: Int!
    roleName: String!
}

input UserGroupRequest {
    departmentId: String
    roleId: Int
    userName: String
}

extend type Mutation {
    signUp(input: UserInput!): String
}

extend type Query {
    signIn(input: UserInput!): UserOutput!
    existLoginId(req: ExistLoginRequest!): Boolean!
    getUserGroup(req: UserGroupRequest!): [UserDetail]
    getUserDetail(id: Int): UserDetail
    getRoles: [RoleResponseForSelect]
}