extend type Query {
    workOrders(filter: WorkOrderFilter): [WorkOrder]!
    workOrdersByProdPlanId(prodPlanId: String!): [WorkOrder]!
}

extend type Mutation {
    saveWorkOrder(createdRows: [WorkOrderInput], updatedRows: [WorkOrderUpdate]): Boolean
    deleteWorkOrders(workOrderIds: [String!]!): WorkOrderDeleteResult
    startWorkOrders(workOrderIds: [String!]!): WorkOrderOperationResult
    completeWorkOrders(workOrderIds: [String!]!): WorkOrderOperationResult
}

input WorkOrderFilter {
    workOrderId: String
    prodPlanId: String
    productId: String
    shiftType: String
    state: [String]
    flagActive: Boolean
}

type WorkOrder {
    id: Int
    site: String
    compCd: String
    workOrderId: String
    prodPlanId: String
    productId: String
    orderQty: Float
    shiftType: String
    state: String
    createDate: String
    createUser: String
    updateDate: String
    updateUser: String
    flagActive: Boolean
}

input WorkOrderInput {
    prodPlanId: String
    productId: String
    orderQty: Float
    shiftType: String
    state: String
    flagActive: Boolean
}

input WorkOrderUpdate {
    workOrderId: String!
    prodPlanId: String
    productId: String
    orderQty: Float
    shiftType: String
    state: String
    flagActive: Boolean
}

type WorkOrderDeleteResult {
    success: Boolean!
    totalRequested: Int!
    deletedCount: Int!
    skippedCount: Int!
    skippedWorkOrders: [String!]!
    message: String!
}

type WorkOrderOperationResult {
    success: Boolean!
    totalRequested: Int!
    processedCount: Int!
    skippedCount: Int!
    skippedWorkOrders: [String!]!
    message: String!
}